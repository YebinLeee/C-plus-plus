#include <iostream>
using namespace std;

class BaseArray {
private:
	int capacity; // 동적 할당된 메모리 용량
	int *mem;
protected:
	BaseArray(int capacity=100) {
		this->capacity = capacity; mem = new int [capacity];
	}
	~BaseArray() { delete [] mem; }
	void put(int index, int val) { mem[index] = val; }
	int get(int index) { return mem[index]; }
	int getCapacity() { return capacity; }
};

class MyQueue:public BaseArray{
	int head,tail,size;	
public:
		MyQueue(int c): BaseArray(c){
			head=0; // 큐에 데이터가 삽입될 위치
			tail=1;
			size=0;
		}
		void enqueue(int n);
		int dequeue();
		int length();
		int capacity();		
};

void MyQueue::enqueue(int n){
	
	if(size==getCapacity()) return;
	
	put(head, n);
	head++;
	size++;
}

int MyQueue::length(){
	return size;
}

int MyQueue::dequeue(){
	if(size==0) return -1;
	size--;
	tail++;
	return get(tail);
}


int main() {
	MyQueue mQ(100);
	int n;
	cout << "큐에 삽입할 5개의 정수를 입력하라>> ";
	for(int i=0; i<5; i++) {
		cin >> n;
		mQ.enqueue(n); // 큐에 삽입
	}
	cout << "큐의 용량:" << mQ.capacity() << ", 큐의 크기:" << mQ.length() << endl; 
	cout << "큐의 원소를 순서대로 제거하여 출력한다>> ";
	while(mQ.length() != 0) {
		cout << mQ.dequeue() << ' '; // 큐에서 제거하여 출력
	}
	cout << endl << "큐의 현재 크기 : " << mQ.length() << endl;
}


